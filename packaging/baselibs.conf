arch i586 targets armv5tel:armv5tel armv6l:armv6l armv7l:armv7l armv7hl:armv7hl armv7nhl:armv7nhl 
arch x86_64 targets armv5tel:armv5tel armv6l:armv6l armv7l:armv7l armv7hl:armv7hl armv7nhl:armv7nhl 


cross-armv5tel-gcc-accel-@X86@
  targettype x86 block!
  targettype 32bit block!
  targettype armv6l block!
  targettype armv7l block!
  targettype armv7hl block!
  targettype armv7nhl block!

  targettype armv5tel autoreqprov off
  targettype armv5tel provides "cross-arm-gcc-accel"
  targettype armv5tel provides "cross-armv5tel-gcc-accel-armv5tel"
  targettype armv5tel requires "eglibc-@X86@-arm"
  targettype armv5tel requires "gmp-@X86@-arm"
  targettype armv5tel requires "libgcc-@X86@-arm"
  targettype armv5tel requires "mpfr-@X86@-arm"
  targettype armv5tel requires "mpc-@X86@-arm"
  targettype armv5tel requires "gcc"
  targettype armv5tel requires "gcc-c++"

  targettype armv5tel prefix /emul/ia32-linux
  targettype armv5tel extension -arm
  targettype armv5tel +/
  targettype armv5tel -/usr/lib/debug
  targettype armv5tel -/usr/lib64/debug
  targettype armv5tel -/usr/src/debug
  targettype armv5tel -/usr/share/man
  targettype armv5tel -/usr/share/doc
  targettype armv5tel -/usr/share/locale
  targettype armv5tel requires "tizen-accelerator"
  targettype armv5tel post "#set -x"
  targettype armv5tel post " export GCCVER=$(LANG=C gcc --version | head -1 | cut -d" " -f5) "
  targettype armv5tel post " export GCCVER_NEW=$(LANG=C <prefix>/usr/bin/gcc --version | head -1 | cut -d" " -f5) "
  targettype armv5tel post " echo \"GCCVER: $GCCVER     GCCVER_NEW: $GCCVER_NEW \" "
  targettype armv5tel post " if test "${GCCVER}" == "${GCCVER_NEW}"; then"
  targettype armv5tel post "  echo "GCC and GCC-accel versions match. Enabling cross-compiler." "
  targettype armv5tel post "  for bin in c++ cpp g++ gcc gcov; do "
  targettype armv5tel post "   binary="/usr/bin/${bin}" "
  targettype armv5tel post "   if test -L ${binary} -a -e ${binary}.orig-arm ; then"
  targettype armv5tel post "     echo "${binary} not installed or ${binary}.orig-arm already present !" "
  targettype armv5tel post "   else "
  targettype armv5tel post "     mv ${binary} ${binary}.orig-arm && cp <prefix>${binary} ${binary}"
  targettype armv5tel post "   fi "
  targettype armv5tel post "  done "

  targettype armv5tel post "  for bin in cc1 cc1plus collect2 lto-wrapper lto1 ; do "
  targettype armv5tel post "   binary="/usr/lib/gcc/armv5tel-tizen-linux-gnueabi/$GCCVER/$bin" "
  targettype armv5tel post "   if test -L ${binary} -a -e ${binary}.orig-arm ; then"
  targettype armv5tel post "     echo "${binary} not installed or ${binary}.orig-arm already present !" "
  targettype armv5tel post "   else "
  targettype armv5tel post "     mv ${binary} ${binary}.orig-arm && cp <prefix>/usr/lib/gcc/armv5tel-tizen-linux-gnueabi/$GCCVER_NEW/${bin} ${binary}"
  targettype armv5tel post "   fi "
  targettype armv5tel post "  done "
  targettype armv5tel post " else"
  targettype armv5tel post "  echo "GCC and GCC-accel versions don't match. Rollback also binutils..." "
  targettype armv5tel post "  for bin in addr2line ar as c++filt elfedit gprof ld ld.bfd ld.gold nm objcopy objdump ranlib readelf size strings strip ; do"
  targettype armv5tel post "   binary="/usr/bin/${bin}" "  
  targettype armv5tel post "   if test -e ${binary}.orig-arm ; then"  
  targettype armv5tel post "     rm ${binary} && mv ${binary}.orig-arm ${binary}"  
  targettype armv5tel post "   else "  
  targettype armv5tel post "     echo "${binary}.orig-arm not present !" "  
  targettype armv5tel post "   fi "  
  targettype armv5tel post "  done "  
  targettype armv5tel post "  rm -f /usr/lib/gcc/armv5tel-tizen-linux-gnueabi/${GCCVER}/ld"
  targettype armv5tel post "  rm -f /usr/lib/gcc/armv5tel-tizen-linux-gnueabi/${GCCVER}/ld.bfd" 
  targettype armv5tel post "  rm -f /usr/lib/gcc/armv5tel-tizen-linux-gnueabi/${GCCVER}/ld.gold"
  targettype armv5tel post " fi"

  targettype armv5tel preun " export GCCVER=$(LANG=C gcc --version | head -1 | cut -d" " -f5) "
  targettype armv5tel preun " for i in c++ cpp g++ gcc gcov; do if test -e /usr/bin/${i}.orig-arm ; then rm /usr/bin/${i} ; mv /usr/bin/${i}.orig-arm /usr/bin/${i}; fi ; done "
  targettype armv5tel preun " for i in cc1 cc1plus collect2 lto-wrapper lto1 ; do cd /usr/lib/gcc/armv5tel-tizen-linux-gnueabi/$GCCVER ; if test -e ${i}.orig-arm ; then rm ${i} ; mv ${i}.orig-arm ${i} ; fi ; done "



cross-armv6l-gcc-accel-@X86@
  targettype x86 block!
  targettype 32bit block!
  targettype armv5tel block!
  targettype armv7l block!
  targettype armv7hl block!
  targettype armv7nhl block!

  targettype armv6l autoreqprov off
  targettype armv6l provides "cross-arm-gcc-accel"
  targettype armv6l provides "cross-armv6l-gcc-accel-armv6l"
  targettype armv6l requires "eglibc-@X86@-arm"
  targettype armv6l requires "gmp-@X86@-arm"
  targettype armv6l requires "libgcc-@X86@-arm"
  targettype armv6l requires "mpfr-@X86@-arm"
  targettype armv6l requires "mpc-@X86@-arm"
  targettype armv6l requires "gcc"
  targettype armv6l requires "gcc-c++"

  targettype armv6l prefix /emul/ia32-linux
  targettype armv6l extension -arm
  targettype armv6l +/
  targettype armv6l -/usr/lib/debug
  targettype armv6l -/usr/lib64/debug
  targettype armv6l -/usr/src/debug
  targettype armv6l -/usr/share/man
  targettype armv6l -/usr/share/doc
  targettype armv6l -/usr/share/locale
  targettype armv6l requires "tizen-accelerator"
  targettype armv6l post "#set -x"
  targettype armv6l post " export GCCVER=$(LANG=C gcc --version | head -1 | cut -d" " -f5) "
  targettype armv6l post " export GCCVER_NEW=$(LANG=C <prefix>/usr/bin/gcc --version | head -1 | cut -d" " -f5) "
  targettype armv6l post " echo \"GCCVER: $GCCVER     GCCVER_NEW: $GCCVER_NEW \" "
  targettype armv6l post " if test "${GCCVER}" == "${GCCVER_NEW}"; then"
  targettype armv6l post "  echo "GCC and GCC-accel versions match. Enabling cross-compiler." "
  targettype armv6l post "  for bin in c++ cpp g++ gcc gcov; do "
  targettype armv6l post "   binary="/usr/bin/${bin}" "
  targettype armv6l post "   if test -L ${binary} -a -e ${binary}.orig-arm ; then"
  targettype armv6l post "     echo "${binary} not installed or ${binary}.orig-arm already present !" "
  targettype armv6l post "   else "
  targettype armv6l post "     mv ${binary} ${binary}.orig-arm && cp <prefix>${binary} ${binary}"
  targettype armv6l post "   fi "
  targettype armv6l post "  done "

  targettype armv6l post "  for bin in cc1 cc1plus collect2 lto-wrapper lto1 ; do "
  targettype armv6l post "   binary="/usr/lib/gcc/armv6l-tizen-linux-gnueabi/$GCCVER/$bin" "
  targettype armv6l post "   if test -L ${binary} -a -e ${binary}.orig-arm ; then"
  targettype armv6l post "     echo "${binary} not installed or ${binary}.orig-arm already present !" "
  targettype armv6l post "   else "
  targettype armv6l post "     mv ${binary} ${binary}.orig-arm && cp <prefix>/usr/lib/gcc/armv6l-tizen-linux-gnueabi/$GCCVER_NEW/${bin} ${binary}"
  targettype armv6l post "   fi "
  targettype armv6l post "  done "
  targettype armv6l post " else"
  targettype armv6l post "  echo "GCC and GCC-accel versions don't match. Rollback also binutils..." "
  targettype armv6l post "  for bin in addr2line ar as c++filt elfedit gprof ld ld.bfd ld.gold nm objcopy objdump ranlib readelf size strings strip ; do"
  targettype armv6l post "   binary="/usr/bin/${bin}" "  
  targettype armv6l post "   if test -e ${binary}.orig-arm ; then"  
  targettype armv6l post "     rm ${binary} && mv ${binary}.orig-arm ${binary}"  
  targettype armv6l post "   else "  
  targettype armv6l post "     echo "${binary}.orig-arm not present !" "  
  targettype armv6l post "   fi "  
  targettype armv6l post "  done "  
  targettype armv6l post "  rm -f /usr/lib/gcc/armv6l-tizen-linux-gnueabi/${GCCVER}/ld"
  targettype armv6l post "  rm -f /usr/lib/gcc/armv6l-tizen-linux-gnueabi/${GCCVER}/ld.bfd" 
  targettype armv6l post "  rm -f /usr/lib/gcc/armv6l-tizen-linux-gnueabi/${GCCVER}/ld.gold"
  targettype armv6l post " fi"

  targettype armv6l preun " export GCCVER=$(LANG=C gcc --version | head -1 | cut -d" " -f5) "
  targettype armv6l preun " for i in c++ cpp g++ gcc gcov; do if test -e /usr/bin/${i}.orig-arm ; then rm /usr/bin/${i} ; mv /usr/bin/${i}.orig-arm /usr/bin/${i}; fi ; done "
  targettype armv6l preun " for i in cc1 cc1plus collect2 lto-wrapper lto1 ; do cd /usr/lib/gcc/armv6l-tizen-linux-gnueabi/$GCCVER ; if test -e ${i}.orig-arm ; then rm ${i} ; mv ${i}.orig-arm ${i} ; fi ; done "



cross-armv7l-gcc-accel-@X86@
  targettype x86 block!
  targettype 32bit block!
  targettype armv5tel block!
  targettype armv6l block!
  targettype armv7hl block!
  targettype armv7nhl block!

  targettype armv7l autoreqprov off
  targettype armv7l provides "cross-arm-gcc-accel"
  targettype armv7l provides "cross-armv7l-gcc-accel-armv7l"
  targettype armv7l requires "eglibc-@X86@-arm"
  targettype armv7l requires "gmp-@X86@-arm"
  targettype armv7l requires "libgcc-@X86@-arm"
  targettype armv7l requires "mpfr-@X86@-arm"
  targettype armv7l requires "mpc-@X86@-arm"
  targettype armv7l requires "gcc"
  targettype armv7l requires "gcc-c++"

  targettype armv7l prefix /emul/ia32-linux
  targettype armv7l extension -arm
  targettype armv7l +/
  targettype armv7l -/usr/lib/debug
  targettype armv7l -/usr/lib64/debug
  targettype armv7l -/usr/src/debug
  targettype armv7l -/usr/share/man
  targettype armv7l -/usr/share/doc
  targettype armv7l -/usr/share/locale
  targettype armv7l requires "tizen-accelerator"
  targettype armv7l post "#set -x"
  targettype armv7l post " export GCCVER=$(LANG=C gcc --version | head -1 | cut -d" " -f5) "
  targettype armv7l post " export GCCVER_NEW=$(LANG=C <prefix>/usr/bin/gcc --version | head -1 | cut -d" " -f5) "
  targettype armv7l post " echo \"GCCVER: $GCCVER     GCCVER_NEW: $GCCVER_NEW \" "
  targettype armv7l post " if test "${GCCVER}" == "${GCCVER_NEW}"; then"
  targettype armv7l post "  echo "GCC and GCC-accel versions match. Enabling cross-compiler." "
  targettype armv7l post "  for bin in c++ cpp g++ gcc gcov; do "
  targettype armv7l post "   binary="/usr/bin/${bin}" "
  targettype armv7l post "   if test -L ${binary} -a -e ${binary}.orig-arm ; then"
  targettype armv7l post "     echo "${binary} not installed or ${binary}.orig-arm already present !" "
  targettype armv7l post "   else "
  targettype armv7l post "     mv ${binary} ${binary}.orig-arm && cp <prefix>${binary} ${binary}"
  targettype armv7l post "   fi "
  targettype armv7l post "  done "

  targettype armv7l post "  for bin in cc1 cc1plus collect2 lto-wrapper lto1 ; do "
  targettype armv7l post "   binary="/usr/lib/gcc/armv7l-tizen-linux-gnueabi/$GCCVER/$bin" "
  targettype armv7l post "   if test -L ${binary} -a -e ${binary}.orig-arm ; then"
  targettype armv7l post "     echo "${binary} not installed or ${binary}.orig-arm already present !" "
  targettype armv7l post "   else "
  targettype armv7l post "     mv ${binary} ${binary}.orig-arm && cp <prefix>/usr/lib/gcc/armv7l-tizen-linux-gnueabi/$GCCVER_NEW/${bin} ${binary}"
  targettype armv7l post "   fi "
  targettype armv7l post "  done "
  targettype armv7l post " else"
  targettype armv7l post "  echo "GCC and GCC-accel versions don't match. Rollback also binutils..." "
  targettype armv7l post "  for bin in addr2line ar as c++filt elfedit gprof ld ld.bfd ld.gold nm objcopy objdump ranlib readelf size strings strip ; do"
  targettype armv7l post "   binary="/usr/bin/${bin}" "  
  targettype armv7l post "   if test -e ${binary}.orig-arm ; then"  
  targettype armv7l post "     rm ${binary} && mv ${binary}.orig-arm ${binary}"  
  targettype armv7l post "   else "  
  targettype armv7l post "     echo "${binary}.orig-arm not present !" "  
  targettype armv7l post "   fi "  
  targettype armv7l post "  done "  
  targettype armv7l post "  rm -f /usr/lib/gcc/armv7l-tizen-linux-gnueabi/${GCCVER}/ld"
  targettype armv7l post "  rm -f /usr/lib/gcc/armv7l-tizen-linux-gnueabi/${GCCVER}/ld.bfd" 
  targettype armv7l post "  rm -f /usr/lib/gcc/armv7l-tizen-linux-gnueabi/${GCCVER}/ld.gold"
  targettype armv7l post " fi"

  targettype armv7l preun " export GCCVER=$(LANG=C gcc --version | head -1 | cut -d" " -f5) "
  targettype armv7l preun " for i in c++ cpp g++ gcc gcov; do if test -e /usr/bin/${i}.orig-arm ; then rm /usr/bin/${i} ; mv /usr/bin/${i}.orig-arm /usr/bin/${i}; fi ; done "
  targettype armv7l preun " for i in cc1 cc1plus collect2 lto-wrapper lto1 ; do cd /usr/lib/gcc/armv7l-tizen-linux-gnueabi/$GCCVER ; if test -e ${i}.orig-arm ; then rm ${i} ; mv ${i}.orig-arm ${i} ; fi ; done "



cross-armv7hl-gcc-accel-@X86@
  targettype x86 block!
  targettype 32bit block!
  targettype armv5tel block!
  targettype armv6l block!
  targettype armv7l block!
  targettype armv7nhl block!

  targettype armv7hl autoreqprov off
  targettype armv7hl provides "cross-arm-gcc-accel"
  targettype armv7hl provides "cross-armv7hl-gcc-accel-armv7hl"
  targettype armv7hl requires "eglibc-@X86@-arm"
  targettype armv7hl requires "gmp-@X86@-arm"
  targettype armv7hl requires "libgcc-@X86@-arm"
  targettype armv7hl requires "mpfr-@X86@-arm"
  targettype armv7hl requires "mpc-@X86@-arm"
  targettype armv7hl requires "gcc"
  targettype armv7hl requires "gcc-c++"

  targettype armv7hl prefix /emul/ia32-linux
  targettype armv7hl extension -arm
  targettype armv7hl +/
  targettype armv7hl -/usr/lib/debug
  targettype armv7hl -/usr/lib64/debug
  targettype armv7hl -/usr/src/debug
  targettype armv7hl -/usr/share/man
  targettype armv7hl -/usr/share/doc
  targettype armv7hl -/usr/share/locale
  targettype armv7hl requires "tizen-accelerator"
  targettype armv7hl post "#set -x"
  targettype armv7hl post " export GCCVER=$(LANG=C gcc --version | head -1 | cut -d" " -f5) "
  targettype armv7hl post " export GCCVER_NEW=$(LANG=C <prefix>/usr/bin/gcc --version | head -1 | cut -d" " -f5) "
  targettype armv7hl post " echo \"GCCVER: $GCCVER     GCCVER_NEW: $GCCVER_NEW \" "
  targettype armv7hl post " if test "${GCCVER}" == "${GCCVER_NEW}"; then"
  targettype armv7hl post "  echo "GCC and GCC-accel versions match. Enabling cross-compiler." "
  targettype armv7hl post "  for bin in c++ cpp g++ gcc gcov; do "
  targettype armv7hl post "   binary="/usr/bin/${bin}" "
  targettype armv7hl post "   if test -L ${binary} -a -e ${binary}.orig-arm ; then"
  targettype armv7hl post "     echo "${binary} not installed or ${binary}.orig-arm already present !" "
  targettype armv7hl post "   else "
  targettype armv7hl post "     mv ${binary} ${binary}.orig-arm && cp <prefix>${binary} ${binary}"
  targettype armv7hl post "   fi "
  targettype armv7hl post "  done "

  targettype armv7hl post "  for bin in cc1 cc1plus collect2 lto-wrapper lto1 ; do "
  targettype armv7hl post "   binary="/usr/lib/gcc/armv7hl-tizen-linux-gnueabi/$GCCVER/$bin" "
  targettype armv7hl post "   if test -L ${binary} -a -e ${binary}.orig-arm ; then"
  targettype armv7hl post "     echo "${binary} not installed or ${binary}.orig-arm already present !" "
  targettype armv7hl post "   else "
  targettype armv7hl post "     mv ${binary} ${binary}.orig-arm && cp <prefix>/usr/lib/gcc/armv7hl-tizen-linux-gnueabi/$GCCVER_NEW/${bin} ${binary}"
  targettype armv7hl post "   fi "
  targettype armv7hl post "  done "
  targettype armv7hl post " else"
  targettype armv7hl post "  echo "GCC and GCC-accel versions don't match. Rollback also binutils..." "
  targettype armv7hl post "  for bin in addr2line ar as c++filt elfedit gprof ld ld.bfd ld.gold nm objcopy objdump ranlib readelf size strings strip ; do"
  targettype armv7hl post "   binary="/usr/bin/${bin}" "  
  targettype armv7hl post "   if test -e ${binary}.orig-arm ; then"  
  targettype armv7hl post "     rm ${binary} && mv ${binary}.orig-arm ${binary}"  
  targettype armv7hl post "   else "  
  targettype armv7hl post "     echo "${binary}.orig-arm not present !" "  
  targettype armv7hl post "   fi "  
  targettype armv7hl post "  done "  
  targettype armv7hl post "  rm -f /usr/lib/gcc/armv7hl-tizen-linux-gnueabi/${GCCVER}/ld"
  targettype armv7hl post "  rm -f /usr/lib/gcc/armv7hl-tizen-linux-gnueabi/${GCCVER}/ld.bfd" 
  targettype armv7hl post "  rm -f /usr/lib/gcc/armv7hl-tizen-linux-gnueabi/${GCCVER}/ld.gold"
  targettype armv7hl post " fi"

  targettype armv7hl preun " export GCCVER=$(LANG=C gcc --version | head -1 | cut -d" " -f5) "
  targettype armv7hl preun " for i in c++ cpp g++ gcc gcov; do if test -e /usr/bin/${i}.orig-arm ; then rm /usr/bin/${i} ; mv /usr/bin/${i}.orig-arm /usr/bin/${i}; fi ; done "
  targettype armv7hl preun " for i in cc1 cc1plus collect2 lto-wrapper lto1 ; do cd /usr/lib/gcc/armv7hl-tizen-linux-gnueabi/$GCCVER ; if test -e ${i}.orig-arm ; then rm ${i} ; mv ${i}.orig-arm ${i} ; fi ; done "



cross-armv7nhl-gcc-accel-@X86@
  targettype x86 block!
  targettype 32bit block!
  targettype armv5tel block!
  targettype armv6l block!
  targettype armv7l block!
  targettype armv7hl block!

  targettype armv7nhl autoreqprov off
  targettype armv7nhl provides "cross-arm-gcc-accel"
  targettype armv7nhl provides "cross-armv7nhl-gcc-accel-armv7nhl"
  targettype armv7nhl requires "eglibc-@X86@-arm"
  targettype armv7nhl requires "gmp-@X86@-arm"
  targettype armv7nhl requires "libgcc-@X86@-arm"
  targettype armv7nhl requires "mpfr-@X86@-arm"
  targettype armv7nhl requires "mpc-@X86@-arm"
  targettype armv7nhl requires "gcc"
  targettype armv7nhl requires "gcc-c++"

  targettype armv7nhl prefix /emul/ia32-linux
  targettype armv7nhl extension -arm
  targettype armv7nhl +/
  targettype armv7nhl -/usr/lib/debug
  targettype armv7nhl -/usr/lib64/debug
  targettype armv7nhl -/usr/src/debug
  targettype armv7nhl -/usr/share/man
  targettype armv7nhl -/usr/share/doc
  targettype armv7nhl -/usr/share/locale
  targettype armv7nhl requires "tizen-accelerator"
  targettype armv7nhl post "#set -x"
  targettype armv7nhl post " export GCCVER=$(LANG=C gcc --version | head -1 | cut -d" " -f5) "
  targettype armv7nhl post " export GCCVER_NEW=$(LANG=C <prefix>/usr/bin/gcc --version | head -1 | cut -d" " -f5) "
  targettype armv7nhl post " echo \"GCCVER: $GCCVER     GCCVER_NEW: $GCCVER_NEW \" "
  targettype armv7nhl post " if test "${GCCVER}" == "${GCCVER_NEW}"; then"
  targettype armv7nhl post "  echo "GCC and GCC-accel versions match. Enabling cross-compiler." "
  targettype armv7nhl post "  for bin in c++ cpp g++ gcc gcov; do "
  targettype armv7nhl post "   binary="/usr/bin/${bin}" "
  targettype armv7nhl post "   if test -L ${binary} -a -e ${binary}.orig-arm ; then"
  targettype armv7nhl post "     echo "${binary} not installed or ${binary}.orig-arm already present !" "
  targettype armv7nhl post "   else "
  targettype armv7nhl post "     mv ${binary} ${binary}.orig-arm && cp <prefix>${binary} ${binary}"
  targettype armv7nhl post "   fi "
  targettype armv7nhl post "  done "

  targettype armv7nhl post "  for bin in cc1 cc1plus collect2 lto-wrapper lto1 ; do "
  targettype armv7nhl post "   binary="/usr/lib/gcc/armv7nhl-tizen-linux-gnueabi/$GCCVER/$bin" "
  targettype armv7nhl post "   if test -L ${binary} -a -e ${binary}.orig-arm ; then"
  targettype armv7nhl post "     echo "${binary} not installed or ${binary}.orig-arm already present !" "
  targettype armv7nhl post "   else "
  targettype armv7nhl post "     mv ${binary} ${binary}.orig-arm && cp <prefix>/usr/lib/gcc/armv7nhl-tizen-linux-gnueabi/$GCCVER_NEW/${bin} ${binary}"
  targettype armv7nhl post "   fi "
  targettype armv7nhl post "  done "
  targettype armv7nhl post " else"
  targettype armv7nhl post "  echo "GCC and GCC-accel versions don't match. Rollback also binutils..." "
  targettype armv7nhl post "  for bin in addr2line ar as c++filt elfedit gprof ld ld.bfd ld.gold nm objcopy objdump ranlib readelf size strings strip ; do"
  targettype armv7nhl post "   binary="/usr/bin/${bin}" "  
  targettype armv7nhl post "   if test -e ${binary}.orig-arm ; then"  
  targettype armv7nhl post "     rm ${binary} && mv ${binary}.orig-arm ${binary}"  
  targettype armv7nhl post "   else "  
  targettype armv7nhl post "     echo "${binary}.orig-arm not present !" "  
  targettype armv7nhl post "   fi "  
  targettype armv7nhl post "  done "  
  targettype armv7nhl post "  rm -f /usr/lib/gcc/armv7nhl-tizen-linux-gnueabi/${GCCVER}/ld"
  targettype armv7nhl post "  rm -f /usr/lib/gcc/armv7nhl-tizen-linux-gnueabi/${GCCVER}/ld.bfd" 
  targettype armv7nhl post "  rm -f /usr/lib/gcc/armv7nhl-tizen-linux-gnueabi/${GCCVER}/ld.gold"
  targettype armv7nhl post " fi"

  targettype armv7nhl preun " export GCCVER=$(LANG=C gcc --version | head -1 | cut -d" " -f5) "
  targettype armv7nhl preun " for i in c++ cpp g++ gcc gcov; do if test -e /usr/bin/${i}.orig-arm ; then rm /usr/bin/${i} ; mv /usr/bin/${i}.orig-arm /usr/bin/${i}; fi ; done "
  targettype armv7nhl preun " for i in cc1 cc1plus collect2 lto-wrapper lto1 ; do cd /usr/lib/gcc/armv7nhl-tizen-linux-gnueabi/$GCCVER ; if test -e ${i}.orig-arm ; then rm ${i} ; mv ${i}.orig-arm ${i} ; fi ; done "


